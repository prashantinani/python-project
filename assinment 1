{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2db19450",
   "metadata": {},
   "source": [
    "1. In the below elements which of them are values or an expression? eg:- values can be\n",
    "integer or string and expressions will be mathematical operators."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "32c3447a",
   "metadata": {},
   "source": [
    "*\n",
    "\"hello\"\n",
    "-87.8\n",
    "-\n",
    "/\n",
    "+\n",
    "6"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c585a0c7",
   "metadata": {},
   "source": [
    "Answer:There are a total of 4 mathematicaloperators :- '*','-',''/','+' and\n",
    "       There are total 3 values                     :- 'hello',87.8,6"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c4c0f262",
   "metadata": {},
   "source": [
    "2. What is the difference between string and variable?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5de8bdc4",
   "metadata": {},
   "source": [
    "Answer\n",
    "A Variable is used to store of information,and a string is a type of information you would store in a Variable.A string is group of characters or a single characters usually enclose in double quotes \" \" or single quotes ' '"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "50c3cd87",
   "metadata": {},
   "source": [
    "3. Describe three different data types."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dfee3212",
   "metadata": {},
   "source": [
    "Three fundamental Data types in python are int,float,complex.\n",
    "1. int data type     : We can use int data type to represent whole numbers(integral values)\n",
    "2. float data type   : We can use float data type tp represent floating point values(decimal values)\n",
    "3. complex data type : complex number is represented by complex class.it is specified as (real part)+(imaginary part)j"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "523ff04e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1234 <class 'int'>\n",
      "2.554 <class 'float'>\n",
      "(5+2j) <class 'complex'>\n"
     ]
    }
   ],
   "source": [
    "#Example for int data type\n",
    "int_value = 1234\n",
    "print(int_value, type(int_value))\n",
    "\n",
    "#Example for float data type\n",
    "float_value= 2.554\n",
    "print(float_value, type(float_value))\n",
    "\n",
    "#Example for complex data type\n",
    "complex_value= 5+2j\n",
    "print(complex_value, type(complex_value))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4aecec2d",
   "metadata": {},
   "source": [
    "4. What is an expression made up of? What do all expressions do?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f036c12",
   "metadata": {},
   "source": [
    "Answer\n",
    "An expression is a combination of values,variable,operators,and calls to functions.Expressions need to be evaluated. If we ask python to print an expression, ,the  interpreter evaluates the expression and displays the result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ffc6d8c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "44"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "4*8+52-40  #Is an expresion example"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "81b78a9d",
   "metadata": {},
   "source": [
    "5. This assignment statements, like spam = 10. What is the difference between an\n",
    "expression and a statement?"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d834e818",
   "metadata": {},
   "source": [
    "Answer\n",
    "An expression is a combination of values,variable,operators.When we type expression at the prompt,the interpreter evaluate it,which means that it finds the value of the expression.\n",
    "eg: 7*8+5+8-9 is an example of a expression\n",
    "\n",
    "A statement is a unit of code that has an effect, like creating a variable or displaying a value.When we type a statement,the interpreter executes it,which means that it does whatever the statement says.in general statements don't have value  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6b7104cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ineuron data scince\n"
     ]
    }
   ],
   "source": [
    "#exampls\n",
    "8*5+6-9 # is a expression \n",
    "couse_value =20000 # Is a Statement\n",
    "print ('ineuron data scince') #Is a Expression Statement"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3bd805f",
   "metadata": {},
   "source": [
    "6. After running the following code, what does the variable bacon contain?\n",
    "bacon = 22\n",
    "bacon + 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d7e00fa1",
   "metadata": {},
   "source": [
    "The variable bacon is set to 22.The expression bacon + 1does not reassign the value in bacon (the whould the case if the express is like bacon =bacon + 1 instead of bacon +1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "8a74ed41",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22\n"
     ]
    }
   ],
   "source": [
    "# Example case#1\n",
    "bacon = 22\n",
    "bacon + 1\n",
    "print(bacon)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "f41db723",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23\n"
     ]
    }
   ],
   "source": [
    "# Example case#2\n",
    "bacon = 22\n",
    "bacon = bacon +1\n",
    "print(bacon)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0514fabf",
   "metadata": {},
   "source": [
    "7.What should the values of the following two terms be?\n",
    "\n",
    "'spam'+'spamspam'\n",
    "'spam'*3"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "57969bf1",
   "metadata": {},
   "source": [
    "Answer\n",
    " Both expressions evaluate to the string 'spamspamspam' Where as the first expression follows String Concatentation and the second expression follows String Multiplication\n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "bf7d513f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "spamspamspam\n",
      "spamspamspam\n"
     ]
    }
   ],
   "source": [
    "print('spam'+'spamspam') # string concatenation\n",
    "print('spam'*3) # string multiplication"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad30ee6d",
   "metadata": {},
   "source": [
    "8. Why is eggs a valid variable name while 100 is invalid?\n",
    " \n",
    " Answer\n",
    "  \n",
    "  As per python,Variable names cannot begin with a number. The python rules for naming a variable are :-\n",
    "\n",
    "   1. Variable name must start with a letter or the underscore character.\n",
    "   2. Variable name cannot start with a number.\n",
    "   3. Variable name can only contain alpha-numeric characters and underscores (A-z, 0-9, & _ ).\n",
    "   4. Variable names are case-sensitive (name, INEURON and ineuron are three different variables).\n",
    "   5. The reserved words(keywords) cannot be used naming the variable.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "f804ed37",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "cannot assign to literal (1602716365.py, line 2)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Input \u001b[1;32mIn [20]\u001b[1;36m\u001b[0m\n\u001b[1;33m    100='Inani' # Invalid Variable Initilization\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m cannot assign to literal\n"
     ]
    }
   ],
   "source": [
    "egg='prashant' # Valid variable Initilization\n",
    "100='Inani' # Invalid Variable Initilization\n",
    "print(egg) #prints the value of egg ie Ineuron\n",
    "print(100) # Raises a Syntax Error as 100 is not a valid variable name"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9d25d14f",
   "metadata": {},
   "source": [
    "9.What three functions can be used to get the integer,floating-point number,or string version of a value?\n",
    "\n",
    "Answer \n",
    "The int(),float(),and str() functions will evaluate to the integer,floating-point number,string version of the value passed to them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "ad733e45",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "int(10.0) ->  10\n",
      "float(10) ->  10.0\n",
      "str(10) ->  10\n"
     ]
    }
   ],
   "source": [
    "\n",
    "\n",
    "# Examples:\n",
    "print('int(10.0) -> ',int(10.0)) # int() function converts given input to int\n",
    "print('float(10) -> ',float(10)) # float() function converts given input to float\n",
    "print('str(10) -> ',str(10)) # str() function converts given input to string\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "15c841d2",
   "metadata": {},
   "source": [
    "\n",
    "10.Why does this expression cause an error? how can you fix it?\n",
    "\n",
    "'I have eaten ' + 99 + 'burritos.'\n",
    "\n",
    "Answer \n",
    "\n",
    "This cause of error is 99.because 99 is not a string. 99 must be typecasted to a string to fix this error. \n",
    "the correct way is:\n",
    "Input: 'I have eaten ' + str(99) + 'burritos.'\n",
    "Output: 'I have eaten 99 burritos.'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "010480a9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i have eaten 99 burritos\n"
     ]
    }
   ],
   "source": [
    "print('i have eaten '+str(99)+' burritos')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13fe07d1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
